{"version":3,"sources":["logo.svg","components/partnerships/Partnerships.tsx","components/Home.tsx","components/ContactUs/ContactUs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Partnerships","className","src","process","alt","React","Home","ContactUs","App","basename","Navbar","expand","bg","variant","Brand","href","logo","Toggle","aria-controls","Collapse","id","Nav","Item","to","activeClassName","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,uQCEtBC,E,iLAGb,OACI,uBAAKC,UAAU,yBACX,uBAAKA,UAAU,mBACX,uBAAKA,UAAU,cACX,uBAAKA,UAAU,QACX,uBAAKC,IAAKC,8BAA6CC,IAAI,SAASH,UAAU,aAC9E,yLAKR,uBAAKA,UAAU,aACX,uBAAKA,UAAU,QACX,uBAAKC,IAAKC,8BAA6CC,IAAI,SAASH,UAAU,aAE9E,oNAKR,uBAAKA,UAAU,aACX,uBAAKA,UAAU,QACX,uBAAKC,IAAKC,8BAA6CC,IAAI,SAASH,UAAU,aAE9E,0N,GA3BcI,aCCrBC,E,iLAGb,OAAQ,uBAAKL,UAAU,uBACnB,uBAAKA,UAAU,0BACX,sBAAIA,UAAU,wBAAd,cACA,0IAEJ,uBAAKA,UAAU,6BACX,gBAAC,EAAD,OAEJ,uBAAKA,UAAU,0BACX,sBAAKA,UAAU,oBAAf,aACA,kHAEJ,uBAAKA,UAAU,2BACX,uCACA,mO,GAjBkBI,aCDbE,E,iLAGb,OAAQ,uBAAKN,UAAU,wBACnB,uBAAKA,UAAU,kBACX,uBAAKA,UAAU,YACX,uBAAKG,IAAI,iBAAiBF,IAAKC,kCAAiDF,UAAU,oBAE9F,uBAAKA,UAAU,YACX,uBAAKA,UAAU,gBACX,0CACA,6DAGA,8CAGA,sDAGA,2BACA,0CACA,6DAGA,gDAGA,8D,GA5BeI,aCyCxBG,EAhCO,WACpB,OACE,kBAAC,IAAD,CAAQC,SAAUN,eAEhB,yBAAKF,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAACS,EAAA,EAAD,CAAQT,UAAU,wBAAwBU,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACtE,kBAACH,EAAA,EAAOI,MAAR,CAAcb,UAAU,eAAec,KAAK,KAAI,yBAAKb,IAAKc,IAAMZ,IAAI,UACpE,kBAACM,EAAA,EAAOO,OAAR,CAAeC,gBAAc,aAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBlB,UAAU,eAAemB,GAAG,YAC3C,kBAACC,EAAA,EAAD,CAAKpB,UAAU,WACb,kBAACoB,EAAA,EAAIC,KAAL,KAAW,kBAAC,IAAD,CAASC,GAAG,QAAQC,gBAAgB,cAAcvB,UAAU,aAA5D,SACX,kBAACoB,EAAA,EAAIC,KAAL,KAAW,kBAAC,IAAD,CAASC,GAAG,aAAaC,gBAAgB,cAAcvB,UAAU,YAAjE,eACX,kBAACoB,EAAA,EAAIC,KAAL,KAAW,kBAAC,IAAD,CAASC,GAAG,gBAAgBC,gBAAgB,cAAcvB,UAAU,YAApE,gBAKnB,yBAAKA,UAAU,kBACb,kBAAC,IAAD,CAAOwB,OAAO,EAAMC,KAAK,IAAIC,UAAWrB,IACxC,kBAAC,IAAD,CAAOoB,KAAK,QAAQC,UAAWrB,IAC/B,kBAAC,IAAD,CAAOoB,KAAK,aAAaC,UAAWpB,IACpC,kBAAC,IAAD,CAAOmB,KAAK,gBAAgBC,UAAW3B,KAEzC,oECvBY4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c99a21f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0092e920.svg\";","import * as React from 'react'\r\n\r\nexport default class Partnerships extends React.Component {\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"partnership-container\">\r\n                <div className=\"items-container\">\r\n                    <div className=\"item-cell \">\r\n                        <div className=\"item\">\r\n                            <img src={process.env.PUBLIC_URL + \"/images/img1.jpg\"} alt=\"image1\" className=\"item-img\" />\r\n                            <p>this part is a sapmle of item view with image.\r\n                                this item has two part. the first part in the top, is a image and second part is a description for prcture.\r\n                </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"item-cell\">\r\n                        <div className=\"item\">\r\n                            <img src={process.env.PUBLIC_URL + \"/images/img2.jpg\"} alt=\"image2\" className=\"item-img\" />\r\n\r\n                            <p>this is a duplicated text. this part is a sapmle of item view with image.\r\n                                    this item has two part. the first part in the top, is a image and second part is a description for prcture.\r\n                </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"item-cell\">\r\n                        <div className=\"item\">\r\n                            <img src={process.env.PUBLIC_URL + \"/images/img3.jpg\"} alt=\"image3\" className=\"item-img\" />\r\n\r\n                            <p>this is a duplicated text. this part is a sapmle of item view with image.\r\n                                    this item has two part. the first part in the top, is a image and second part is a description for prcture.\r\n                </p>\r\n                        </div>\r\n                    </div>\r\n                </div></div>\r\n        )\r\n    }\r\n}","import * as React from 'react'\r\nimport Partnerships from './partnerships/Partnerships';\r\n\r\nexport default class Home extends React.Component {\r\n\r\n    public render() {\r\n        return (<div className=\"home-page-container\">\r\n            <div className=\"home-page-row content1\">\r\n                <h1 className=\"animate_hide_to_show\"> Content 1</h1>\r\n                <p>This part is a design that used a svg for background. additional, a animation applied in title of this part.</p>\r\n            </div>\r\n            <div className=\"home-page-row items-temp1\">\r\n                <Partnerships />\r\n            </div>\r\n            <div className=\"home-page-row content2\">\r\n                <h1  className=\"animate_go_down \">Content 2</h1>\r\n                <p>This part is a sample for content 2 design. In this design used animation for title.</p>\r\n            </div>\r\n            <div className=\"home-page-row content3 \">\r\n                <h1>Content 3</h1>\r\n                <p>This is a sample of content 3 design. this part used svg for backgound.\r\n                    This part use light color for design.\r\n                     this desc duplicated for showing this part's view. I hope you satisfy this design.</p>\r\n            </div>\r\n\r\n        </div >)\r\n    }\r\n}","import * as React from 'react'\r\n\r\nexport default class ContactUs extends React.Component {\r\n\r\n    public render() {\r\n        return (<div className=\"contactus-container \">\r\n            <div className=\"contactus-view\">\r\n                <div className=\"view-col\">\r\n                    <img alt=\"contact us img\" src={process.env.PUBLIC_URL + \"/images/contact3.gif\"} className=\"contact_us_img\" />\r\n                </div>\r\n                <div className=\"view-col\">\r\n                    <div className=\"contact-info\">\r\n                        <h4>department 1</h4>\r\n                        <p>\r\n                            Adress : iran ..................\r\n                        </p>\r\n                        <p>\r\n                            Tel : 00000000000\r\n                        </p>\r\n                        <p>\r\n                            WebSite : www.........com\r\n                        </p>\r\n                        <hr />\r\n                        <h4>department 2</h4>\r\n                        <p>\r\n                            Adress : iran ..................\r\n                        </p>\r\n                        <p>\r\n                            Tel : 1111111111111\r\n                        </p>\r\n                        <p>\r\n                            WebSite : www.........com\r\n                        </p>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>)\r\n    }\r\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './App.scss';\nimport logo from './logo.svg'\nimport { Navbar, Nav } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Home from './components/Home';\nimport ContactUs from './components/ContactUs/ContactUs';\nimport Partnerships from './components/partnerships/Partnerships';\n\nconst App: React.FC = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n\n      <div className=\"App\">\n        <div className=\"ss-home-menubar\">\n          <Navbar className=\"navbar navbar-inverse\" expand=\"md\" bg=\"drak\" variant=\"dark\">\n            <Navbar.Brand className=\"navbar-brand\" href=\"/\"><img src={logo} alt=\"logo\" /></Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"myNavbar\" />\n            <Navbar.Collapse className=\"navbar-right\" id=\"myNavbar\">\n              <Nav className=\"mr-auto\">\n                <Nav.Item ><NavLink to=\"/Home\" activeClassName=\"active-page\" className=\"nav-link \">Home</NavLink></Nav.Item>\n                <Nav.Item ><NavLink to=\"/ContactUs\" activeClassName=\"active-page\" className=\"nav-link\">Contact Us</NavLink></Nav.Item>\n                <Nav.Item ><NavLink to=\"/Partnerships\" activeClassName=\"active-page\" className=\"nav-link\">Gallery</NavLink></Nav.Item>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n        </div>\n        <div className=\"main-container\">\n          <Route exact={true} path=\"/\" component={Home} />\n          <Route path=\"/Home\" component={Home} />\n          <Route path=\"/ContactUs\" component={ContactUs} />\n          <Route path=\"/Partnerships\" component={Partnerships} />\n        </div>\n        <footer>\n          @copyright 2019 (version 1.1)\n      </footer>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}